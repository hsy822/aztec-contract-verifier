use std::env;
use std::path::PathBuf;
use std::process::{Command, Stdio};
use aztec_contract_verifier::util::platform::detect_platform;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let version = env::args()
        .nth(1)
        .expect("Usage: upload-release <version>");
    let platform = detect_platform()?;
    let file_name = format!("toolchain-{version}-{platform}.tar.gz");
    let file_path = PathBuf::from(&file_name);

    if !file_path.exists() {
        return Err(format!("‚ùå File not found: {}", file_name).into());
    }

    // Check gh installed
    let gh_check = Command::new("gh")
        .arg("--version")
        .stdout(Stdio::null())
        .stderr(Stdio::null())
        .status()?;

    if !gh_check.success() {
        return Err("‚ùå GitHub CLI (gh) not found. Install from https://cli.github.com/".into());
    }

    let repo = "hsy822/aztec-contract-verifier";

    // Check if release exists
    let check_release = Command::new("gh")
        .args(["release", "view", &version, "--repo", repo])
        .stdout(Stdio::null())
        .stderr(Stdio::null())
        .status()?;

    if !check_release.success() {
        println!("üì¶ Release tag `{}` not found. Creating new release...", version);

        let create_status = Command::new("gh")
            .args([
                "release", "create", &version,
                "--repo", repo,
                "--title", &version,
                "--notes", "Prebuilt toolchain auto-generated by upload-release CLI.",
            ])
            .stdout(Stdio::inherit())
            .stderr(Stdio::inherit())
            .status()?;

        if !create_status.success() {
            return Err("‚ùå Failed to create GitHub release.".into());
        }

        println!("‚úÖ Created release: {}", version);
    }

    // Upload asset
    println!("üì§ Uploading {} to GitHub release: {}", file_name, version);
    let upload_status = Command::new("gh")
        .args([
            "release", "upload", &version, &file_name,
            "--repo", repo,
            "--clobber", // overwrite if already exists
        ])
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .status()?;

    if !upload_status.success() {
        return Err("‚ùå Upload failed.".into());
    }

    println!("‚úÖ Upload complete.");
    Ok(())
}
