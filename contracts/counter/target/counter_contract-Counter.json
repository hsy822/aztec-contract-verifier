{"noir_version":"1.0.0-beta.4+2056df7bdb1f49a017658d8456f1c531c4261e60","name":"Counter","functions":[{"name":"increment","hash":"8873848090064658926","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["increment"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"increment_and_decrement","hash":"8687716579838925703","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["increment_and_decrement"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"initialize","hash":"9314291222004117829","is_unconstrained":false,"custom_attributes":["initializer","private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["initialize"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"increment_twice","hash":"1638466477521090433","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["increment_twice"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"get_counter","hash":"17724035417686970","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_counter"],"brillig_names":["get_counter"]},{"name":"sync_notes","hash":"13535115297487806818","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"decrement","hash":"17796325577823535502","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"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","names":["decrement"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Counter::increment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::decrement_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::decrement_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::increment_and_decrement_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_and_decrement_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::increment_twice_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_twice_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::initialize_parameters","fields":[{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Counter"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"// docs:start:setup\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Counter {\n    // docs:end:setup\n    // docs:start:imports\n    use aztec::macros::{functions::{initializer, private, utility}, storage::storage};\n    use aztec::prelude::{AztecAddress, Map};\n    use aztec::protocol_types::traits::{FromField, ToField};\n    use easy_private_state::EasyPrivateUint;\n    use value_note::{balance_utils, value_note::ValueNote};\n    // docs:end:imports\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[initializer]\n    #[private]\n    // We can name our initializer anything we want as long as it's marked as aztec(initializer)\n    fn initialize(headstart: u64, owner: AztecAddress) {\n        let counters = storage.counters;\n        counters.at(owner).add(headstart, owner, context.msg_sender());\n    }\n    // docs:end:constructor\n\n    // docs:start:increment\n    #[private]\n    fn increment(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n    }\n    // docs:end:increment\n\n    #[private]\n    fn increment_twice(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter twice for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n        counters.at(owner).add(1, owner, sender);\n    }\n\n    #[private]\n    fn increment_and_decrement(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing and decrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n        counters.at(owner).sub(1, owner, sender);\n    }\n\n    #[private]\n    fn decrement(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Decrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).sub(1, owner, sender);\n    }\n\n    // docs:start:get_counter\n    #[utility]\n    unconstrained fn get_counter(owner: AztecAddress) -> Field {\n        let counters = storage.counters;\n        balance_utils::get_balance(counters.at(owner).set)\n    }    \n}","path":"/Users/sooyounghyun/Desktop/dev/aztec-contract-verifier/contracts/counter/src/main.nr"},"51":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"59":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"62":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"64":{"source":"use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/discovery/mod.nr"},"65":{"source":"use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr"},"66":{"source":"use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr"},"68":{"source":"use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log,\n        pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n        PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{\n            PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_EVENT_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID,\n        },\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get logs from capsules\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    let len = logs.len();\n\n    // We iterate over the logs in reverse order to avoid shifting elements.\n    let mut i = len;\n    while i > 0 {\n        i -= 1;\n\n        // Get and process each log\n        let log = logs.get(i);\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n\n        // Remove the log from the capsule array\n        logs.remove(i);\n    }\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PRIVATE_EVENT_LOG_TYPE_ID {\n        debug_log(\"Processing private event log\");\n\n        // In the case of event logs, the log metadata is the event selector.\n        let event_selector = EventSelector::from_field(log_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            log_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n        );\n    } else {\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr"},"69":{"source":"use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr"},"70":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr"},"73":{"source":"use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr"},"77":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::{aes128::AES128, utils::prefix_with_tag},\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::to_expanded_metadata,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The \"2\" in \"N + 2\" is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    log_type_id: u64,\n) -> [Field; (N + 2)]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    let mut fields = [0; N + 2];\n\n    // We pack log type id and log metadata into the first field. Search for `decode_log_plaintext` function to see\n    // where the value gets decoded.\n    fields[0] = to_expanded_metadata(Note::get_id() as u64, log_type_id);\n    fields[1] = storage_slot;\n    for i in 0..packed_note.len() {\n        fields[i + 2] = packed_note[i];\n    }\n\n    fields\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_LOG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    log_type_id: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let plaintext = compute_note_plaintext_for_this_strategy(note, storage_slot, log_type_id);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr"},"78":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/utils.nr"},"82":{"source":"global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr"},"86":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"101":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"102":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"103":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"107":{"source":"use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{check_each_fn_macroified, create_message_discovery_call},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //         $message_discovery_call\n    //     }\n    // }\n\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() {\n            $message_discovery_call\n        }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"112":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"115":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"117":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"118":{"source":"use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"122":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"124":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"127":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"130":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"131":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"133":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"137":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"139":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"141":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"146":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"147":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"148":{"source":"use crate::discovery::MAX_LOG_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        log_content,\n        tx_hash,\n        log_index_in_tx,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"149":{"source":"use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"151":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"152":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"153":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"156":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"162":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"179":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"180":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"181":{"source":"pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr"},"182":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"183":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"185":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"186":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"188":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"190":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"191":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"210":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"255":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"258":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"260":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"265":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"272":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"273":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"274":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"287":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"289":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"290":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"299":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"310":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"329":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"345":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"346":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"354":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"355":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"357":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UtilityContext, note::note_viewer_options::NoteViewerOptions, state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UtilityContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UtilityContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"358":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/value-note/src/filter.nr"},"361":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/v0.84.0/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}