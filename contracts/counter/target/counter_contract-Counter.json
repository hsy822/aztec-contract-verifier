{"noir_version":"1.0.0-beta.4+7fb652c888402f5283ed8ac560a95f02dc2513b8","name":"Counter","functions":[{"name":"sync_notes","hash":"17744278662146023617","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"increment_and_decrement","hash":"12826834953389989960","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["increment_and_decrement"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"decrement","hash":"2734425963710956737","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["decrement"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"increment","hash":"3193578938463979410","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["increment"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"increment_twice","hash":"4175826672647310895","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["increment_twice"],"brillig_names":["discover_new_messages","debug_log_oracle_wrapper","random","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"initialize","hash":"8604242643732299566","is_unconstrained":false,"custom_attributes":["initializer","private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["initialize"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","random","notify_created_note_oracle_wrapper","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"get_counter","hash":"15490697300861007402","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_counter"],"brillig_names":["get_counter"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Counter::decrement_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::decrement_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::initialize_parameters","fields":[{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::increment_twice_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_twice_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::increment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::increment_and_decrement_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_and_decrement_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Counter"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"// docs:start:setup\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Counter {\n    // docs:end:setup\n    // docs:start:imports\n    use aztec::macros::{functions::{initializer, private, utility}, storage::storage};\n    use aztec::prelude::{AztecAddress, Map};\n    use aztec::protocol_types::traits::{FromField, ToField};\n    use easy_private_state::EasyPrivateUint;\n    use value_note::{balance_utils, value_note::ValueNote};\n    // docs:end:imports\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[initializer]\n    #[private]\n    // We can name our initializer anything we want as long as it's marked as aztec(initializer)\n    fn initialize(headstart: u64, owner: AztecAddress) {\n        let counters = storage.counters;\n        counters.at(owner).add(headstart, owner, context.msg_sender());\n    }\n    // docs:end:constructor\n\n    // docs:start:increment\n    #[private]\n    fn increment(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n    }\n    // docs:end:increment\n\n    #[private]\n    fn increment_twice(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing counter twice for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n        counters.at(owner).add(1, owner, sender);\n    }\n\n    #[private]\n    fn increment_and_decrement(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Incrementing and decrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, sender);\n        counters.at(owner).sub(1, owner, sender);\n    }\n\n    #[private]\n    fn decrement(owner: AztecAddress, sender: AztecAddress) {\n        unsafe {\n            dep::aztec::oracle::debug_log::debug_log_format(\n                \"Decrementing counter for owner {0}\",\n                [owner.to_field()],\n            );\n        }\n        let counters = storage.counters;\n        counters.at(owner).sub(1, owner, sender);\n    }\n\n    // docs:start:get_counter\n    #[utility]\n    unconstrained fn get_counter(owner: AztecAddress) -> Field {\n        let counters = storage.counters;\n        balance_utils::get_balance(counters.at(owner).set)\n    }    \n}","path":"/Users/sooyounghyun/Desktop/dev/aztec-contract-verifier/contracts/counter/src/main.nr"},"51":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"59":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"62":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"66":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/hash.nr"},"81":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"82":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"83":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"87":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"92":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"95":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"97":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"98":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"100":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"101":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"102":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"104":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"105":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"106":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"107":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"114":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr"},"115":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"120":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"122":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"125":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"128":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"129":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"131":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"135":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"137":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"139":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"144":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"145":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"146":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"147":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"149":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"150":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"151":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"154":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"160":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"177":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"178":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"180":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"181":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"183":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"184":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"186":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"188":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"189":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"216":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"261":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"264":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"266":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"271":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"278":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"279":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"280":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"293":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"295":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"296":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"305":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"316":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"351":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"352":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"360":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"361":{"source":"use dep::aztec::{\n    context::PrivateContext, messages::logs::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"363":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UtilityContext, note::note_viewer_options::NoteViewerOptions, state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UtilityContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UtilityContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"364":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/value-note/src/filter.nr"},"367":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/Users/sooyounghyun/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}